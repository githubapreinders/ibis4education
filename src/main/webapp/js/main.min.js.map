{"version":3,"sources":["app.js","application.js","controllers.js","services.js","xmlTag.js"],"names":[],"mappings":"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","file":"main.min.js","sourcesContent":["'use strict';\n\nangular.module('template1', ['ui.router'])\n    .config(function ($stateProvider, $urlRouterProvider)\n    {\n        $stateProvider\n\n        // route for the home page\n            .state('app', {\n                url: '/',\n                views: {\n                    'content': {\n                        templateUrl: 'views/home.html',\n                        controller: 'IndexController as vm'\n                    }\n                }\n            })\n        ;\n        $urlRouterProvider.otherwise('/');\n    })\n;","(function()\n{\n    var app = angular.module('confab',['ui.router']);\n\n\napp.config(function ($stateProvider, $urlRouterProvider)\n{\n    console.log('Application config...')\n    $stateProvider\n\n    // route for the home page\n        .state('app', {\n            url: '/',\n            views: {\n                'content': {\n                    templateUrl: 'views/home.html',\n                    controller: 'IndexController as vm'\n                }\n            }\n        })\n    ;\n    $urlRouterProvider.otherwise('/');\n\n    \n});\n\n})();","(function ()\n{\n    'use strict';\n\n    angular.module('confab')\n        .controller('IndexController', function (xmlTag, staticDataFactory)\n        {\n\n            console.log('IndexController...');\n            var vm = this;\n            vm.submitForm = submitForm;\n\n            vm.message = \"Angular Controller is working allright...\";\n            vm.myTags = staticDataFactory.getData();\n            console.log(\"mytags\",vm.myTags);\n\n            \n\n\n            function submitForm(string)\n\n            {\n            \tif (vm.userInput !== \"\")\n            \t{\n            \t\tvar values = vm.userInput.split(/\\s+/);\n            \t\tconsole.log(\"values from splitter:\", values);\n            \t\tvar tagtitle = values.shift();\n            \t\tvar tagproperties = [];\n            \t\tif (values.length > 0)\n            \t\t{\n            \t\t\tvalues.forEach(function(val)\n            \t\t\t{\n            \t\t\t\ttagproperties.push(val);\n            \t\t\t});\n            \t\t}\n            \tvm.myTags.push(new xmlTag(tagtitle, tagproperties));\n\n            \t}\n            \t\n            }\n\n        });\n})();\n\n\n","(function(){\n\n'use strict';\n\nangular.module('confab')\n\n    .service('staticDataFactory', function(xmlTag) \n    {\n        var thedata = [new xmlTag('potato',['prop1', 'prop2','prop3']),\n                       new xmlTag('chickpea',['prop1', 'prop2','prop3']),\n                       new xmlTag('currypaste',['prop1', 'prop2'])];\n\n        return{\n            getData : getData\n        }\n\n        \n        \n        function getData()\n        {\n            return thedata;\n        }\n\n\n    })\n\n})();   ","(function ()\n{\n    \n/*\n    Defines an xmlTag object that will be used as the main data carrier in the editor;\n    Its main feature is that it is a tag with a possible string of text after it - the suffix\n*/\nangular.module('confab')\n\n    .factory('xmlTag', function() \n        {\n            /*\n            tagTypes are \"STARTTAG\", \"COMBITAG\", and \"ENDTAG\"\n            */\n    \n                function xmlTag(tagtitle, proparray) \n                {\n                    this.suffix = \"\";\n                    this.tagType = \"STARTTAG\";\n                    this.tagTitle = tagtitle;\n                    tagProperties = {};\n                    proparray.forEach(function(prop)\n                    {\n                        tagProperties[prop] = \"\";\n                    }); \n                    this.tagProperties = tagProperties;                   \n                }\n                //native functions of the xmlTag that can access the instance properties\n                xmlTag.prototype = \n                {\n                    getTagType : function()\n                    {\n                        return this.tagType;\n                    },\n                    setTagType : function(astring)\n                    {\n                        switch (astring)\n                        {\n                            case \"STARTTAG\":{this.tagType = \"STARTTAG\"; break;}\n                            case \"COMBITAG\":{this.tagType = \"COMBITAG\";break;}\n                            case \"ENDTAG\":{this.tagType = \"ENDTAG\";break;}\n                            default :{console.log(\"tagType is set to default..\",astring,\" is unknown type.\");\n                                        this.tagType = \"STARTTAG\";}\n                        }\n\n                    },\n                    //converts its contents to a readable xml-tag, dependent on its type\n                    toString : function()\n                    {\n                        var returnstring = \"\";  \n                        var itsproperties = \"\"; \n                        \n                        angular.forEach(this.tagProperties, function(value, key)\n                        {\n                            if (value == \"\")\n                            {\n                                itsproperties += \" \" + key + \"=\\\"\\\" \" + \" \";\n                            }\n                            else\n                            {\n                                itsproperties += \" \" + key + \"=\" + value + \" \";   \n                            }\n\n                        });\n\n\n                        switch (this.tagType)\n                        {\n                            \n                            case \"STARTTAG\":\n                            {\n                                returnstring =           \"< \" + \n                                                this.tagTitle + \n                                                itsproperties + \n                                                \" >\"; \n                                                break;\n\n                            }\n                            case \"COMBITAG\":\n                            {\n                                returnstring =           \"< \" + \n                                                this.tagTitle +\n                                                itsproperties + \n                                                \" />\";\n                                                break;\n                            }\n                            case \"ENDTAG\":{returnstring = \"</ \" + this.tagTitle + \" >\";break;}\n                        }\n\n                        return returnstring;\n                    },\n                    setProperty :function (key, value)\n                    {\n                        this.tagProperties[key] = value;\n                    },\n                    getPropertyValue :function (key)\n                    {\n                        return this.tagProperties[key];\n                    }\n\n\n\n\n                };\n               /*static functions that have no access to this:\n                xmlTag.computeTabdistance = function(tag)\n                {\n                    return tabdistance\n                }\n               */\n            \n            return (xmlTag);\n\n            \n\n        })\n\n    .factory('tagContainer', function()\n    {\n        function tagContainer()\n        {\n            this.tagContainer = [];\n\n        }\n\n\n        tagContainer.prototype = function() \n        {\n\n        }\n\n    });\n\n})();"]}